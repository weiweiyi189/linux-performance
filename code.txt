from pyecharts import options as opts
from pyecharts.charts import Bar
from pyecharts.commons.utils import JsCode
import subprocess

# 执行Shell命令并返回输出结果
def run_command(command):
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if result.returncode == 0:
        return result.stdout
    else:
        raise RuntimeError(f"Command '{command}' failed with error: {result.stderr}")

# 获取top进程的数据
def get_top_processes():
    top_output = run_command("top -bn1 | grep '^ *[0-9]'")
    processes = []
    for line in top_output.split('\n'):
        fields = line.split()
        if len(fields) >= 12:  
            pid, cpu, mem = fields[0], fields[8], fields[9]
            processes.append((pid, float(cpu), float(mem)))
    return processes

# 可视化top进程数据
def visualize_top_processes():
    processes = get_top_processes()
    pids, cpu_usages, mem_usages = zip(*processes)
    
    # 创建柱状图
    bar = Bar()
    bar.add_xaxis(pids)
    bar.add_yaxis("CPU Usage", cpu_usages)
    bar.add_yaxis("Memory Usage", mem_usages)

    # 添加点击事件
    bar.set_global_opts(
        title_opts=opts.TitleOpts(title="Top Processes CPU and Memory Usage"),
        toolbox_opts=opts.ToolboxOpts(orient="vertical", pos_top="top", feature={"save_as_image": {}}),
        legend_opts=opts.LegendOpts(pos_right="right", pos_top="middle"),
        datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_="inside")],
        # 添加排序功能的点击事件
        onclick=JsCode(
            """
            function(params) {
                var chart = params.chart;
                var option = chart.getOption();
                var seriesIndex = params.seriesIndex;
                var seriesName = option.series[seriesIndex].name;
                var data = option.series[seriesIndex].data;
                data.sort(function(a, b) {
                    return a.value[1] - b.value[1];
                });
                option.series[seriesIndex].data = data;
                chart.setOption(option);
            }
            """
        ),
    )

    # 生成可视化图表
    bar.render("top_processes_cpu_memory_usage.html")

if __name__ == "__main__":
    visualize_top_processes()
